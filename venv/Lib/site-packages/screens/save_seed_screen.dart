import 'package:flutter/material.dart';
import 'package:get/get.dart';
import 'package:flutter/services.dart';
import 'package:your_app_name/services/encryption_service.dart';
import 'package:your_app_name/services/database_service.dart';
import 'package:flutter/cupertino.dart';

class SaveSeedScreen extends StatefulWidget {
  @override
  _SaveSeedScreenState createState() => _SaveSeedScreenState();
}

class _SaveSeedScreenState extends State<SaveSeedScreen> {
  final _seedController = TextEditingController();
  final _replacementsController = TextEditingController();
  final _passphraseController = TextEditingController();
  bool _isProcessing = false;

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text("Save Seed Phrase")),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          children: [
            TextField(
              controller: _seedController,
              decoration: InputDecoration(labelText: 'Enter your 12-word seed phrase'),
            ),
            TextField(
              controller: _replacementsController,
              decoration: InputDecoration(labelText: 'Enter custom word replacements'),
            ),
            TextField(
              controller: _passphraseController,
              obscureText: true,
              decoration: InputDecoration(labelText: 'Enter a passphrase'),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _isProcessing ? null : _saveSeed,
              child: _isProcessing 
                ? CircularProgressIndicator() 
                : Text('Save Seed'),
            ),
          ],
        ),
      ),
    );
  }

  // Encrypt the seed and save it to the database
  Future<void> _saveSeed() async {
    setState(() {
      _isProcessing = true;
    });

    String seedPhrase = _seedController.text.trim();
    String passphrase = _passphraseController.text.trim();
    String replacements = _replacementsController.text.trim();
    
    if (seedPhrase.isEmpty || passphrase.isEmpty) {
      setState(() {
        _isProcessing = false;
      });
      return;
    }

    try {
      // Encrypt the seed phrase
      String encryptedSeed = await EncryptionService.encryptSeed(seedPhrase, passphrase);

      // Save the encrypted seed to the database
      await DatabaseService.saveEncryptedSeed(encryptedSeed, passphrase);

      setState(() {
        _isProcessing = false;
      });

      Get.snackbar('Success', 'Seed phrase saved successfully!');
    } catch (e) {
      setState(() {
        _isProcessing = false;
      });
      Get.snackbar('Error', 'An error occurred while saving the seed.');
    }
  }
}
