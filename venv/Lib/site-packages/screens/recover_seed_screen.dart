import 'package:flutter/material.dart';
import 'package:get/get.dart';
import 'package:your_app_name/services/encryption_service.dart';
import 'package:your_app_name/services/database_service.dart';

class RecoverSeedScreen extends StatefulWidget {
  @override
  _RecoverSeedScreenState createState() => _RecoverSeedScreenState();
}

class _RecoverSeedScreenState extends State<RecoverSeedScreen> {
  final _passphraseController = TextEditingController();
  bool _isProcessing = false;
  String _decryptedSeed = '';

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text("Recover Seed Phrase")),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          children: [
            TextField(
              controller: _passphraseController,
              obscureText: true,
              decoration: InputDecoration(labelText: 'Enter your passphrase'),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _isProcessing ? null : _recoverSeed,
              child: _isProcessing 
                ? CircularProgressIndicator() 
                : Text('Recover Seed'),
            ),
            SizedBox(height: 20),
            if (_decryptedSeed.isNotEmpty) 
              Text('Decrypted Seed Phrase: $_decryptedSeed'),
          ],
        ),
      ),
    );
  }

  // Decrypt the seed and retrieve it from the database
  Future<void> _recoverSeed() async {
    setState(() {
      _isProcessing = true;
    });

    String passphrase = _passphraseController.text.trim();
    
    if (passphrase.isEmpty) {
      setState(() {
        _isProcessing = false;
      });
      return;
    }

    try {
      // Retrieve the encrypted seed from the database
      String? encryptedSeed = await DatabaseService.getEncryptedSeed(passphrase);

      if (encryptedSeed == null) {
        setState(() {
          _isProcessing = false;
        });
        Get.snackbar('Error', 'No data found or incorrect passphrase.');
        return;
      }

      // Decrypt the seed phrase
      String? decryptedSeed = await EncryptionService.decryptSeed(encryptedSeed, passphrase);

      if (decryptedSeed != null) {
        setState(() {
          _isProcessing = false;
          _decryptedSeed = decryptedSeed;
        });
      } else {
        setState(() {
          _isProcessing = false;
        });
        Get.snackbar('Error', 'Failed to decrypt the seed phrase.');
      }
    } catch (e) {
      setState(() {
        _isProcessing = false;
      });
      Get.snackbar('Error', 'An error occurred while recovering the seed.');
    }
  }
}
